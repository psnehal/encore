library(chipenrich)
data(peaks_E2F4, package = 'chipenrich.data')
peaks_E2F4 = subset(peaks_E2F4, peaks_E2F4$chrom == 'chr1')
peaks_plus_sv = peaks_E2F4
peaks_plus_sv$signalValue = runif(nrow(peaks_E2F4))*100+10
peak_plus_sv
 peaks_plus_sv
 write.csv(peaks_plus_sv , "filename.csv")
quit()
 start.date <- as.Date("2020-03-01")
        jhu.path <- "https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series"
        jhu.files <- list(
            Case      = paste0(jhu.path, "/time_series_covid19_confirmed_global.csv"),
            Recovered = paste0(jhu.path, "/time_series_covid19_recovered_global.csv"),
            Death    = paste0(jhu.path, "/time_series_covid19_deaths_global.csv")
        )
        data <- reduce(imap(jhu.files,
            function(file, var)
            {
                vroom(file) %>%
                select(Country = matches("Country"), matches("[0-9]+")) %>%
                filter(Country == "India") %>% select(-Country) %>%
                gather(matches("[0-9]+"), key = "Date", value = !!var) %>%
                mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
                filter(Date >= start.date - 1)
            }
        ), ~ left_join(.x, .y)) %>%
        mutate_at(vars(Case, Recovered, Death), list(function(x) {
            y <- x - lag(x)
            ifelse(y < 0, 0, y)
        })) %>%
        filter(Date >= start.date) %>%
        gather(Case, Recovered, Death, key = Type, value = Count) %>%
        mutate(Date = as.factor(format(Date, format = "%b.%d"))) %>%
        mutate(Type = factor(Type, levels = c("Recovered", "Death", "Case")))
        p <- ggplot(data, aes(Date, Count))
        p <- p + geom_bar(stat = "identity", aes(fill = Type), position = "stack") +
        xlab("") + ylab("Number of new cases/recovered/deaths") +
            labs(subtitle = "Data source: Johns Hopkins University CSSE",
                 caption = "© COV-IND-19 Study Group") +
            theme_bw() +
            theme(axis.text.x = element_text(angle = 45, vjust = 0.5, size=15),
                  axis.text.y = element_text(size = 15),
                  legend.position = "bottom", legend.title = element_blank(),
                  legend.text = element_text(size = 17), plot.title =
                  element_text(size = 18), axis.title.y = element_blank(),
                  plot.caption = element_text(color = "blue", face = "bold",
                  size = 10)
            ) +
            scale_fill_manual("", values = c("Case" = "orange", "Recovered" =
                              "dark green", "Death" = "red"))
        print(p)
library(tidyverse)
library(vroom)
library(httr)
library(plotly)
library(glue)
start.date <- as.Date("2020-03-01")
        jhu.path <- "https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series"
        jhu.files <- list(
            Case      = paste0(jhu.path, "/time_series_covid19_confirmed_global.csv"),
            Recovered = paste0(jhu.path, "/time_series_covid19_recovered_global.csv"),
            Death    = paste0(jhu.path, "/time_series_covid19_deaths_global.csv")
        )
        data <- reduce(imap(jhu.files,
            function(file, var)
            {
                vroom(file) %>%
                select(Country = matches("Country"), matches("[0-9]+")) %>%
                filter(Country == "India") %>% select(-Country) %>%
                gather(matches("[0-9]+"), key = "Date", value = !!var) %>%
                mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
                filter(Date >= start.date - 1)
            }
        ), ~ left_join(.x, .y)) %>%
        mutate_at(vars(Case, Recovered, Death), list(function(x) {
            y <- x - lag(x)
            ifelse(y < 0, 0, y)
        })) %>%
        filter(Date >= start.date) %>%
        gather(Case, Recovered, Death, key = Type, value = Count) %>%
        mutate(Date = as.factor(format(Date, format = "%b.%d"))) %>%
        mutate(Type = factor(Type, levels = c("Recovered", "Death", "Case")))
        p <- ggplot(data, aes(Date, Count))
        p <- p + geom_bar(stat = "identity", aes(fill = Type), position = "stack") +
        xlab("") + ylab("Number of new cases/recovered/deaths") +
            labs(subtitle = "Data source: Johns Hopkins University CSSE",
                 caption = "© COV-IND-19 Study Group") +
            theme_bw() +
            theme(axis.text.x = element_text(angle = 45, vjust = 0.5, size=15),
                  axis.text.y = element_text(size = 15),
                  legend.position = "bottom", legend.title = element_blank(),
                  legend.text = element_text(size = 17), plot.title =
                  element_text(size = 18), axis.title.y = element_blank(),
                  plot.caption = element_text(color = "blue", face = "bold",
                  size = 10)
            ) +
            scale_fill_manual("", values = c("Case" = "orange", "Recovered" =
                              "dark green", "Death" = "red"))
        print(p)
        jhu.path <- "https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series"
        countries <- c("France", "Germany", "India", "Iran", "Italy",
                       "Korea, South", "US", "China")
        file <- paste0(jhu.path, "/time_series_covid19_confirmed_global.csv")
        data <- vroom(file) %>%
        select(Country = matches("Country"), matches("[0-9].*")) %>%
        filter(Country %in% countries) %>%
        mutate(Country = ifelse(Country == 'Korea, South', 'South Korea', Country) %>% as.factor()) %>%
        group_by(Country) %>%
        # Since we don't care about counts in each state we collapse into a
        # single count per country of interest.
        summarise_all(sum, na.rm = T) %>%
        gather(matches("[0-9].+"), key = Date, value = Cases) %>%
        mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
        group_by(Country) %>% filter(Cases >= 100) %>%
        arrange(Date) %>%
        mutate(Day = seq(n()))
        Day.max <- 22 # nrow(data %>% filter(Country == "India"))
        data <- filter(data, Day <= Day.max) %>%
        mutate(Day = Day) %>%
        ungroup()
        p <- ggplot(data, aes(Day, Cases, col = Country, group = Country)) +
            geom_point(size = 1.5, na.rm = TRUE, alpha = 1) +
            geom_path(size = 1, na.rm = TRUE, alpha = 1) +
            geom_point(data = data %>% filter(Country == "India"), size = 1.5,
                       na.rm = TRUE, alpha = 1) +
            geom_path(data = data %>% filter(Country == "India"), size = 1,
                      na.rm = TRUE, alpha = 1) +
            xlab("Days since infected cases reached 100")+
            ylab("Number of infected cases") +
            theme_bw() + labs(caption = "\uA9 COV-IND-19 Study Group")+
            theme(axis.text.x = element_text(
                vjust = 0.5, size = 15),
                legend.position = "bottom",
                axis.text.y = element_text(size = 15),
                plot.title = element_text(size = 18),
                plot.caption = element_text(color = "blue", face = "bold"),
                #legend.position = c(0.1,0.6),
                legend.title = element_blank(),
                legend.box = "horizontal",
                legend.text = element_text(size = 17))
        print(p)
jhu.path <- "https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series"
        countries <- c("France", "Germany", "India", "Iran", "Italy",
                       "Korea, South", "US", "China")
        file <- paste0(jhu.path, "/time_series_covid19_confirmed_global.csv")
        data <- vroom(file) %>%
        select(Country = matches("Country"), matches("[0-9].*")) %>%
        filter(Country %in% countries) %>%
        mutate(Country = ifelse(Country == 'Korea, South', 'South Korea', Country) %>% as.factor()) %>%
        group_by(Country) %>%
        # Since we don't care about counts in each state we collapse into a
        # single count per country of interest.
        summarise_all(sum, na.rm = T) %>%
        gather(matches("[0-9].+"), key = Date, value = Cases) %>%
        mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
        group_by(Country) %>% filter(Cases >= 100) %>%
        arrange(Date) %>%
        mutate(Day = seq(n()))
        Day.max <- 22 # nrow(data %>% filter(Country == "India"))
        data <- filter(data, Day <= Day.max) %>%
        mutate(Day = Day) %>%
        ungroup()
data
print.data.frame(data)
write_csv(data, "/Users/snehalpatil/Documents/GithubProjects/CoronoBramarsProject/plot2datamod.csv")
print.data.frame(data)
population[order(population$age),]
data[order(data$Country),]
data2 =data[order(data$Country),]
print.data.frame(data2)
write_csv(data, "/Users/snehalpatil/Documents/GithubProjects/CoronoBramarsProject/plot2datasorted.csv")
jhu.path <- "https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series"
        countries <- c("India")
        file <- paste0(jhu.path, "/time_series_covid19_confirmed_global.csv")
        data <- vroom(file) %>%
        select(Country = matches("Country"), matches("[0-9].*")) %>%
        filter(Country %in% countries) %>%
        group_by(Country) %>%
        # Since we don't care about counts in each state we collapse into a
        # single count per country of interest.
        summarise_all(sum, na.rm = T) %>%
        gather(matches("[0-9].+"), key = Date, value = Cases) %>%
        mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
        group_by(Country) %>% filter(Cases >= 100) %>%
        arrange(Date) %>%
        mutate(Day = seq(n()))
        Day.max <- nrow(data %>% filter(Country == "India"))
        data <- filter(data, Day <= Day.max) %>%
        mutate(Day = Day,
               Date = format(Date, format = "%b %d")) %>%
        ungroup()
        
        if(use_title == TRUE) {
            title_matter = 'Cumulative number of COVID-19 cases in India alone'
        } else {
            title_matter = ''
        }
data
write_csv(data, "/Users/snehalpatil/Documents/GithubProjects/CoronoBramarsProject/plot3indiadata.csv")
    p <- ggplot(data, aes(Date, Cases, col = Country, group = Country)) +
            geom_point(size = 1.5, na.rm = TRUE, color = "#00BE67") +
            geom_path(size = 1, na.rm = TRUE, color = "#00BE67") +
            xlab("\nDays since infected cases reached 100")+
            ylab("Cumulative number of reported cases") +
            theme_bw() + 
            labs(subtitle = paste("This figure displays the cumulative number of COVID-19 cases in India\nsince the country reached 100 total cases. Last updated", format(latest, format = "%b %d")),
                 caption = "\uA9 COV-IND-19 Study Group") + 
            theme(axis.text.x = element_text(angle = 40, vjust = 0.15, size=10),
                legend.position = "bottom",
                axis.text.y = element_text(size = 15),
                plot.title = element_text(size = 18),
                plot.caption = element_text(color = "blue", face = "bold"),
                #legend.position = c(0.1,0.6),
                legend.title = element_blank(),
                legend.box = "horizontal",
                legend.text = element_text(size = 17),
                axis.title.x = element_text()) + 
            ggtitle(title_matter)
        print(p)
jhu.path <- "https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series"
        countries <- c("India")
        file <- paste0(jhu.path, "/time_series_covid19_confirmed_global.csv")
        data <- vroom(file) %>%
        select(Country = matches("Country"), matches("[0-9].*")) %>%
        filter(Country %in% countries) %>%
        group_by(Country) %>%
        # Since we don't care about counts in each state we collapse into a
        # single count per country of interest.
        summarise_all(sum, na.rm = T) %>%
        gather(matches("[0-9].+"), key = Date, value = Cases) %>%
        mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
        group_by(Country) %>% filter(Cases >= 100) %>%
        arrange(Date) %>%
        mutate(Day = seq(n()))
        Day.max <- nrow(data %>% filter(Country == "India"))
        data <- filter(data, Day <= Day.max) %>%
        mutate(Day = Day,
               Date = format(Date, format = "%b %d")) %>%
        ungroup()
        
        if(use_title == TRUE) {
            title_matter = 'Cumulative number of COVID-19 cases in India alone'
        } else {
            title_matter = ''
        }
        p <- ggplot(data, aes(Date, Cases, col = Country, group = Country)) +
            geom_point(size = 1.5, na.rm = TRUE, color = "#00BE67") +
            geom_path(size = 1, na.rm = TRUE, color = "#00BE67") +
            xlab("\nDays since infected cases reached 100")+
            ylab("Cumulative number of reported cases") +
            theme_bw() + 
            labs(subtitle = paste("This figure displays the cumulative number of COVID-19 cases in India\nsince the country reached 100 total cases. Last updated", format(latest, format = "%b %d")),
                 caption = "\uA9 COV-IND-19 Study Group") + 
            theme(axis.text.x = element_text(angle = 40, vjust = 0.15, size=10),
                legend.position = "bottom",
                axis.text.y = element_text(size = 15),
                plot.title = element_text(size = 18),
                plot.caption = element_text(color = "blue", face = "bold"),
                #legend.position = c(0.1,0.6),
                legend.title = element_blank(),
                legend.box = "horizontal",
                legend.text = element_text(size = 17),
                axis.title.x = element_text()) + 
            ggtitle(title_matter)
        print(p)
latest
data3 =data %>% arrange(Country, Date)
write_csv(data, "/Users/snehalpatil/Documents/GithubProjects/CoronoBramarsProject/plot3.csv")
start.date <- as.Date("2020-03-01")
        jhu.path <- paste0("https://github.com/CSSEGISandData/COVID-19/raw/",
                           "master/csse_covid_19_data/csse_covid_19_time_series")
        jhu.files <- list(
            Case      = paste0(jhu.path, "/time_series_covid19_confirmed_global.csv"),
            Recovered = paste0(jhu.path, "/time_series_covid19_recovered_global.csv"),
            Death     = paste0(jhu.path, "/time_series_covid19_deaths_global.csv")
        )
        data <- reduce(imap(jhu.files,
            function(file, var)
            {
                vroom(file) %>%
                select(Country = matches("Country"), matches("[0-9]+")) %>%
                filter(Country == "India") %>% select(-Country) %>%
                gather(matches("[0-9]+"), key = "Date", value = !!var) %>%
                mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
                filter(Date >= start.date - 1)
            }
        ), ~ left_join(.x, .y)) %>%
        mutate_at(vars(Case, Recovered, Death), list(function(x) {
            y <- x - lag(x)
            ifelse(y < 0, 0, y)
        })) %>%
        filter(Date >= start.date) %>%
        gather(Case, Recovered, Death, key = Type, value = Count) %>%
        mutate(Date = as.factor(format(Date, format = "%b %d"))) %>%
        mutate(Type = factor(Type, levels = c("Recovered", "Death", "Case"))) %>%
        mutate(Type = recode(Type, Recovered = 'Recovered', Death = 'Fatalities', Case = 'New Cases') %>% as_factor)
DATA
data
write_csv(data, "/Users/snehalpatil/Documents/GithubProjects/CoronoBramarsProject/plot1data.csv")
source('file_name')`
`
jhu.pathplot2 <- "https://github.com/CSSEGISandData/COVID-19/raw/master/csse_covid_19_data/csse_covid_19_time_series"
        countries <- c("France", "Germany", "India", "Iran", "Italy",
                       "Korea, South", "US", "China")
        file <- paste0(jhu.pathplot2, "/time_series_covid19_confirmed_global.csv")
        data2 <- vroom(file) %>%
        select(Country = matches("Country"), matches("[0-9].*")) %>%
        filter(Country %in% countries) %>%
        mutate(Country = ifelse(Country == 'Korea, South', 'South Korea', Country) %>% as.factor()) %>%
        group_by(Country) %>%
        # Since we don't care about counts in each state we collapse into a
        # single count per country of interest.
        summarise_all(sum, na.rm = T) %>%
        gather(matches("[0-9].+"), key = Date, value = Cases) %>%
        mutate(Date = as.Date(Date, format = "%m/%d/%y")) %>%
        group_by(Country) %>% filter(Cases >= 100) %>%
        arrange(Date) %>%
        mutate(Day = seq(n()))
        Day.max <- 30 # nrow(data2 %>% filter(Country == "India"))
        data2 <- filter(data2, Day <= Day.max) %>%
        mutate(Day = Day) %>%
        ungroup()
        
        data3 =data2 %>% arrange(Country, Date)
if(use_title == TRUE) {
            title_matter = 'Cumulative number of COVID-19 cases in India compared to\nother countries affected by the pandemic'
        } else {
            title_matter = ''
        }
p <- ggplot(data, aes(Day, Cases, col = Country, group = Country)) +
            geom_point(size = 1.5, na.rm = TRUE, alpha = 1) +
            geom_path(size = 1, na.rm = TRUE, alpha = 1) +
            geom_point(data = data %>% filter(Country == "India"), size = 1.5,
                       na.rm = TRUE, alpha = 1) +
            geom_path(data = data %>% filter(Country == "India"), size = 1,
                      na.rm = TRUE, alpha = 1) +
            xlab("Days since infected cases reached 100") +
            ylab("Cumulative number of reported cases") +
            theme_bw() + labs(subtitle = subtext,
                              caption = "\uA9 COV-IND-19 Study Group")+
            theme(axis.text.x = element_text(
                vjust = 0.5, size = 15),
                legend.position = "bottom",
                axis.text.y = element_text(size = 15),
                plot.title = element_text(size = 18),
                plot.caption = element_text(color = "blue", face = "bold"),
                #legend.position = c(0.1,0.6),
                legend.title = element_blank(),
                legend.box = "horizontal",
                legend.text = element_text(size = 17)) + 
            guides(shape = guide_legend(override.aes = list(size = 2)),
                   color = guide_legend(override.aes = list(size = 2))) +
            theme(legend.title = element_text(size = 12), 
                  legend.text  = element_text(size = 12),
                  legend.key.size = unit(0.4, "lines")) + 
            ggtitle(title_matter) + xlim(0, 30)
        print(p)
pwd()
quit()
quit
quit()
